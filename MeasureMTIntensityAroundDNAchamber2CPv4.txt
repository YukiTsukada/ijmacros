/*****
Maria@Nedelec Lab
 This set of macros use pair of tif pictures (the DNA and the tubilin pictures)
Calculate the area of the DNA spots and create a circle (around the Center of Mass of the DNA spot) in   
the tubulin picture, to calculate the Mt integrated intensity in this region.
Afterwards, the background is calculated by adding another circle in a background region
****/

/* updates
071010 Kota (upon request from Celine)
- Check for the distance between detected beads, and when the distance between beads is less than 
twice the radius of the measurement circel ROI, then omit one of them from the measurment.
071030 Kota results in seperate window
*/


// global variables
var DNAImageID = 0 ; 
var TubImageID = 0 ; 
var CircleRadius= 0 ;

var G1title="ch1";
var G2title="ch2";
var Glowthres = 0; // 1
var Ghighthres = 100; // 2
var GDNABeads =3.8; // 3

var GPixelPerMicrometer = 3.218;


macro "DefineDNAImage"
{
// Normally pictures are taken with a 40x objective
// doing otherwise, please check the scale
	run("8-bit");
	DNAImageID = getImageID();
 	print("The DNA Image ID is ", DNAImageID);
	run("Set Scale...", "distance=3.218 known=1 pixel=1 unit=µm");
}

macro "DefineTubImage"
{
// Normally pictures are taken with a 40x objective
// doing otherwise, please check the scale
	run("8-bit");
	TubImageID = getImageID();
	print("The Tub Image ID is ", TubImageID);
	run("Set Scale...", "distance=3.218 known=1 pixel=1 unit=µm");
}

macro "-"{}
///////////// Kota's version
macro "Mt Intensity Around DNA Remove DNA Automatic spots Removal"
{
	//run("Set Scale...", "distance=3.218 known=1 pixel=1 unit=µm");	//1µm = 3.218 pixels
	run("Set Scale...", "distance=1 known=1 pixel=1 unit=µm global");
	run("Clear Results");
	print("\\Clear");

	twoChChoice071018();
	selectWindow(G1title);
	DNAImageID = getImageID();
	selectWindow(G2title);
	TubImageID= getImageID();

// variables 071018
	CircleRadius = 120 ;  //radius of the measurement circle in pixels
	Pi = 3.14151692 ;
	Radius = 2.8 /2 ; //um  radius of single beads
	AreaBead = Pi * Radius * Radius ; // um ^2

// Using DNA Image to create a Mask in 8-bits
	selectImage(DNAImageID);
	 DNAImage = getTitle() ; 
	rename("DNA")
	run("Duplicate...", "title=Mask8-bit");	
	Mask8ImageID = getImageID();
   
	selectImage(Mask8ImageID)  ;
	setThreshold(Glowthres, Ghighthres); 
	run("Convert to Mask");
 	run("Set Measurements...", "area mean  integrated center circularity  redirect=None decimal=1");
	run("Analyze Particles...", "size=258-10000 circularity=0.00-1.00 show=Outlines display clear exclude");

//071010 insertion: retrieve centroid inffromation, and measure the distance between each point.
	NPatches = nResults ;
	DNAareaA = newArray(NPatches ); 
	DNAxmA = newArray(NPatches );
	DNAymA = newArray(NPatches );
	for (i=0; i<NPatches ; i++) {
 		DNAxmA[i] =getResult("XM",i);
		DNAymA[i] = getResult("YM",i);				
		DNAareaA[i] = getResult("Area", i) ;
	}  
	combination_number = NPatches *(NPatches -1) / 2;
	distanceA = newArray(combination_number);
	rejectionA = newArray(NPatches );

	// measurement will be omitted for both DNA spots if their distance is too close. or, the position exceeds the edge. 
	k = 0;
	imw = getWidth();
	imh = getHeight();

	for(i = 0; i< (NPatches -1); i++) {
		for(j = i+1; j< (NPatches ); j++) {
			distanceA[k] = CalcDistance(DNAxmA[j] , DNAymA[j] , DNAxmA[i] , DNAymA[i]);			
			if ( distanceA[k] < CircleRadius*2) {
				if (i<j) {
					rejectionA[i] = 1;
					print("Distance spot" +(j+1)+ "-spot"+(i+1)+ " = "+ distanceA[k] + " :spot "+(i+1)+" rejected");
				}
				if (i>j) {
					rejectionA[j] = 1;
					print("Distance spot" +(j+1)+ "-spot"+(i+1)+ " = "+ distanceA[k] + " :spot "+(j+1)+" rejected");
				}
			}
			k++;
		}
	}

	for(i = 0; i< (NPatches); i++) {	
		if (((DNAxmA[i] -CircleRadius) < 0) || ((DNAxmA[i] +CircleRadius) > =imw) ) {
			rejectionA[i] = 1;
			print("Spot" +(i+1)+ " is too close to the image edge. rejected");
		}
		if (((DNAymA[i] -CircleRadius) < 0) || ((DNAymA[i] +CircleRadius) > =imh) ) {
			rejectionA[i] = 1;
			print("Spot" +(i+1)+ " is too close to the image edge. rejected");
		}
		//print(""+i+"x "+DNAxmA[i]+" y "+DNAymA[i]);
	}

	counter =0;
	for (i=0; i< rejectionA.length; i++) counter+= rejectionA[i];
	newNPatches = NPatches - counter;
	
	
  // Open MT image and remove the DNA contribution by substracting the DNA "Mask"
  // Open DNA and remove the DNA contribution by substracting the DNA "Mask" (CONTROL)
	run("Clear Results");
	selectImage(TubImageID);
 	TubImage = getTitle() ; 
	rename("MT");
	run("Subtract Background...", "rolling=75");

 	imageCalculator("Subtract create",DNAImageID,Mask8ImageID);
 	//selectWindow("Result of DNA");
	rename("Control") ; 
	ControlImageID = getImageID();
	
	selectImage(Mask8ImageID);
	run("Duplicate...", "title=Mask16-bit");	
	Mask16ImageID = getImageID();
	run("16-bit");
	run("Multiply...", "value=256");
	imageCalculator("Subtract create",TubImageID,Mask16ImageID);
 	rename("MT to analyze") ; 
 	TubSubImageID = getImageID();

	selectImage(Mask16ImageID);
	close();

  	print("//DNA Image: ", DNAImage) ; 
  	print("//Tub Image: ",TubImage ) ; 
  	print("//Threshold used : " +Glowthres+" ,   "+ Ghighthres) ; 


// Go through the differents DNA patches and 
// use the center of mass to position a circle around the DNA
// in the tubulin image

	IntDenA = newArray(NPatches);			
	AvgDenA = newArray(NPatches);
	ControlIntDenA = newArray(NPatches);	
	DNAAmountA = newArray(NPatches);			
	ControlAvgDenA = newArray(NPatches);

	//print("id		Area		DNAAmount(pg)		IntegratedDensity		Control-IntegratedDensity		-AverageIntensity");

	PixelsPerMicrometerSQ = GPixelPerMicrometer * GPixelPerMicrometer;
	setFont("SansSerif", 18);
	for (i=0; i<NPatches; i++)   	{
		if (rejectionA[i] ==0) {
	 		CenterX =DNAxmA[i];
			CenterY= DNAymA[i];
			x0 =CenterX-CircleRadius ;
			y0 = CenterY-CircleRadius ;
			Width = 2*CircleRadius ;
			Length = 2*CircleRadius;
  
			selectImage(TubSubImageID) ;
			makeOval(x0, y0,Width , Length);
			run("Measure");  
			run("Draw");
			drawString(i+1, DNAxmA[i], DNAymA[i]);
			IntDenA[i] = getResult("IntDen",nResults-1) ;
			AvgDenA[i] = IntDenA[i] / (CircleRadius * CircleRadius * Pi - DNAareaA[i])/PixelsPerMicrometerSQ ;

			selectImage(ControlImageID) ;
			makeOval(x0, y0,Width , Length);
			run("Measure");  
			run("Draw");
			drawString(i+1, DNAxmA[i], DNAymA[i]);

			ControlIntDenA[i] = getResult("IntDen",nResults-1);
			DNAAmountA [i] =DNAareaA[i]/PixelsPerMicrometerSQ / AreaBead * GDNABeads ;
			ControlAvgDenA[i]  = 	ControlIntDenA[i] / (CircleRadius * CircleRadius * Pi - DNAareaA[i])/PixelsPerMicrometerSQ ;
			//print("spot"+ (i+1)+"		"+DNAareaA[i]/PixelsPerMicrometerSQ +"		"+DNAAmountA[i] + "		"+ IntDenA[i] + "		"+ ControlIntDenA[i] +"		"+ ControlAvgDenA[i]);

		} 
	}
	print("See Results window for the Measured Parameters");

	selectWindow("DNA") ;
	close() ;
	selectWindow("MT") ;
	close() ;
	selectWindow("Mask8-bit") ;
	close() ;
	selectWindow("Drawing of Mask8-bit") ;
	close() ;

//	run("Clear Results");

	requires("1.38m");
	title1 = "MT_DNA measurements";
	title2 = "["+title1+"]";
  	f = title2;
	if (isOpen(title1))
 		print(f, "\\Clear");
 	else
		run("New... ", "name="+title2+" type=Table width=800 height=600");
	print(f, "\\Headings:SpotID\tSpotX\tSpotY\tDNAarea\tDNAamount\tMTIntDensity\tMTAvgDensity\tControlIntDensity\tControlAvgDensity");

	counter =0;
	for (i = 0; i< DNAareaA.length; i++) {
		if (rejectionA[i] ==0) {
/*			setResult("SpotID", counter, i+1);
			setResult("SpotX", counter, DNAxmA[i]);
			setResult("SpotY", counter, DNAymA[i]);
			setResult("DNAarea",counter, DNAareaA[i]/PixelsPerMicrometerSQ);
			setResult("DNAamount", counter, DNAAmountA[i]);
			setResult("MTIntDensity", counter, IntDenA[i]);
			setResult("MTAvgDensity", counter, AvgDenA[i]);
			setResult("ControlIntDensity", counter, ControlIntDenA[i]);
			setResult("ControlAvgDensity", counter, ControlAvgDenA[i] );
*/
			tablestr = ""+ (i+1) + "\t" + DNAxmA[i] + "\t" + DNAymA[i]+ "\t" +  DNAareaA[i]/PixelsPerMicrometerSQ+ "\t" + DNAAmountA[i]+ "\t";
			tablestr = tablestr + IntDenA[i] + "\t"+ AvgDenA[i] + "\t"+ ControlIntDenA[i] + "\t" + ControlAvgDenA[i]  + "\t";
			print(f, tablestr);
			
			counter++;
		}
	}
	updateResults();
}

function CalcDistance(p1x, p1y, p2x, p2y) {
	sum_difference_squared = pow((p2x - p1x),2) + pow((p2y - p1y),2);
	distance = pow(sum_difference_squared, 0.5);
	return distance;
}
macro "-"{}
/*
macro "test combinations" {
	resnum = 5;
	for(i = 0; i< (resnum-1); i++) {
		for(j = i+1; j< (resnum); j++) {
		print("" + i + " - "+j);
	}
}
*/

/*
macro "test two choice"{
	twoChChoice070904();
}
*/
function twoChChoice071018() {
	imgnum=Wincount();
	imgIDA=newArray(imgnum);
	wintitleA=newArray(imgnum);

	CountOpenedWindows(imgIDA);
	WinTitleGetter(imgIDA,wintitleA);

// 	Dialog.create("Select Images");
	Dialog.create("Threshold for DNA image");
	Dialog.addMessage("set the threshold for the DNA image") ;

	Dialog.addChoice("Ch1 (DNA)", wintitleA);
	Dialog.addChoice("Ch2 (Microtubule)", wintitleA);

	Dialog.addNumber("Low Threshold ",36);
	Dialog.addNumber("High Threshold",255 );
	Dialog.addMessage("DNA coated beads ") ;
	Dialog.addNumber("picograms of DNA per bead=  ", 4.2);
/*
	Dialog.addCheckbox("Measure MT tip position",G_MeasureMapSwitch);
*/

 	Dialog.show();
 	//number1 = Dialog.getNumber();

 	//number2 
 	G1title = Dialog.getChoice();
	G2title = Dialog.getChoice();

	Glowthres = Dialog.getNumber() ; // 1
	Ghighthres = Dialog.getNumber() ; // 2
	GDNABeads = Dialog.getNumber() ; // 3


/*
	G_width = Dialog.getNumber();
	G_MeasureMapSwitch=Dialog.getCheckbox();
*/
}

// counts how many windows are opened.
function Wincount() {
	wincounter=0;
	for(i=0; i>-2000; i--) {
		if(isOpen(i)) {
			wincounter++;
		}
	}
	return wincounter;
}

// stores imageID in the Array
function CountOpenedWindows(imgIDA) {
	imgcount=0;
	for(i=0; i>-2000; i--) {
		if(isOpen(i)) {
			imgIDA[imgcount]=i;
			imgcount++;
		}
	}
}

// using the imageID array constructed above, window titles are stored in a string array
function WinTitleGetter(idA,titleA) {
	for (i=0;i<idA.length;i++) {
		selectImage(idA[i]);
		titleA[i]=getTitle();
	}
}

///////////////////////////////////////////////////////////////////////////
/////////////////
macro "DefineBackground"
{
    CenterX =100;
    CenterY= 100;
    x0 =CenterX-CircleRadius ;
    y0 = CenterY-CircleRadius ;
    Width = 2*CircleRadius ;
    Length = 2*CircleRadius;
   
    selectWindow("MT to analyze") ;
    makeOval(x0, y0,Width , Length);


}
//////////////////
macro "MeasureBackgroundValue"
{
    run("Measure");  
    run("Label");
  Dialog.create("Last Result");
  Dialog.addMessage("Id of the last result") ;
  Dialog.addMessage("in the Log window: Last Id+1") ;
  Dialog.addNumber("Id ",0);
  Dialog.show() ; 
  Id = Dialog.getNumber() ; // 1
  Area= getResult("Area", Id) ;
  IntDen = getResult("IntDen",Id) ;
  print(""+0 +"         "+0+"    "+0 + "    "+  IntDen + "    "+0);
 
}

